/*
 * generated by Xtext 2.10.0
 */
package org.slizaa.neo4j.opencypher.formatting2

import com.google.inject.Inject
import java.util.function.Consumer
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion
import org.slizaa.neo4j.opencypher.openCypher.Clause
import org.slizaa.neo4j.opencypher.openCypher.Cypher
import org.slizaa.neo4j.opencypher.openCypher.Match
import org.slizaa.neo4j.opencypher.openCypher.SingleQuery
import org.slizaa.neo4j.opencypher.services.OpenCypherGrammarAccess

class OpenCypherFormatter extends AbstractFormatter2 {
	
	@Inject extension OpenCypherGrammarAccess

	Cypher cypher;

	def dispatch void format(Cypher c, extension IFormattableDocument document) {

		cypher = c;

		formatKeyword("(", [surround[noSpace]])
		formatKeyword(")", [surround[noSpace]])
		formatKeyword("-", [surround[noSpace]])
		formatKeyword("[", [surround[noSpace]])
		formatKeyword("]", [surround[noSpace]])

//		//
//		for (Clause clause : singleQuery.clauses) {
//			val boolean hasFollowingSemicolon = clause.immediatelyFollowing.keyword(";") != null;
//			if (!hasFollowingSemicolon) {
//				clause.append[newLine]
//			}
//			format(clause, document);
//		}
	}

	def dispatch void format(SingleQuery singleQuery, extension IFormattableDocument document) {

		//
		for (Clause clause : singleQuery.clauses) {
			val boolean hasFollowingSemicolon = clause.immediatelyFollowing.keyword(";") != null;
			if (!hasFollowingSemicolon) {
				clause.append[newLine]
			}
			format(clause, document);
		}
	}

	def dispatch void format(Match match, extension IFormattableDocument document) {
		match.interior[indent]
		match.where?.prepend[newLine].append[newLine];
		match.pattern.interior[noSpace]
	}

	def private formatKeyword(String keyword, Consumer<? super ISemanticRegion> consumer) {
		cypher.allRegionsFor.keywords(keyword).forEach(consumer)
	}

	protected def void noLineWrap(IHiddenRegionFormatter it) {
		setNewLines(0, 0, 0)
	}

	protected def void defaultLineWrap(IHiddenRegionFormatter it) {
		setNewLines(1, 2, 2)
	}
}
