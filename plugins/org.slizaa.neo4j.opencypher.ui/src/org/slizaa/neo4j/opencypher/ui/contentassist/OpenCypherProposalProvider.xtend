/*
 * generated by Xtext 2.10.0
 */
package org.slizaa.neo4j.opencypher.ui.contentassist

import com.google.common.collect.Sets
import java.util.Set
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.slizaa.neo4j.opencypher.ui.contentassist.service.MetaGraphProviderImpl

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class OpenCypherProposalProvider extends AbstractOpenCypherProposalProvider {

	private static final Set<String> BLACKLIST_KEYWORDS = Sets.newHashSet("CYPHER", "DROP", "EXPLAIN", "PROFILE", "USING", "[", "IN", "STARTS", "ENDS", "CONTAINS", "IS",
		"(", "CREATE", "DELETE", "DETACH", "FOREACH", "LOAD", "MATCH", "MERGE", "OPTIONAL", "REMOVE", "RETURN", "SET", "START", "UNION", "UNWIND", "WITH");

	override completeRuleCall(RuleCall ruleCall, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		println("ruleCall " + ruleCall)
		super.completeRuleCall(ruleCall, contentAssistContext, acceptor)
		
	}


	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {

//		println("completeKeyword" + keyword)
//
//		// https://kthoms.wordpress.com/2012/05/22/xtext-content-assist-filtering-keyword-proposals/
//		if (BLACKLIST_KEYWORDS.contains(keyword.getValue())) {
//			// don't propose keyword
//			return;
//		}
//		super.completeKeyword(keyword, contentAssistContext, acceptor);
return;
	}

//	override protected doCreateProposal(String proposal, StyledString displayString, Image image, int priority,
//		ContentAssistContext context) {
//		println(proposal + priority)
//		super.doCreateProposal(proposal, displayString, image, 0, context)
//	}
// LabelName
	override complete_LabelName(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_LabelName(model, ruleCall, context, acceptor);

		for (label : new MetaGraphProviderImpl().labels) {
			acceptor.accept(createCompletionProposal(label, context));
		}
	}

	override complete_PropertyKeyName(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_PropertyKeyName(model, ruleCall, context, acceptor)

		acceptor.accept(createCompletionProposal("fqn", context));
		acceptor.accept(createCompletionProposal("name", context));
		acceptor.accept(createCompletionProposal("sourceFileName", context));
		acceptor.accept(createCompletionProposal("visibility", context));
		acceptor.accept(createCompletionProposal("abstract", context));
		acceptor.accept(createCompletionProposal("static", context));
		acceptor.accept(createCompletionProposal("final", context));
		acceptor.accept(createCompletionProposal("synthetic", context));
		acceptor.accept(createCompletionProposal("byteCodeVersion", context));
		acceptor.accept(createCompletionProposal("md5", context));
		acceptor.accept(createCompletionProposal("valid", context));
	}

	override complete_RelTypeName(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.complete_RelTypeName(model, ruleCall, context, acceptor);

// TODO
		for (label : new MetaGraphProviderImpl().labels) {
			acceptor.accept(createCompletionProposal(label, context));
		}
	}

//	override complete_Match(EObject model, RuleCall ruleCall, ContentAssistContext context,
//		ICompletionProposalAcceptor acceptor) {
//			
//		super.complete_Match(model, ruleCall, context, acceptor);
//
//		// Create and register the completion proposal:
//		// The proposal may be null as the createCompletionProposal(..) 
//		// methods check for valid prefixes and terminal token conflicts.
//		// The acceptor handles null-values gracefully.
//		acceptor.accept(createCompletionProposal("()-[]->()", context));
//	}
//	override complete_Pattern(EObject model, RuleCall ruleCall, ContentAssistContext context,
//		ICompletionProposalAcceptor acceptor) {
//		super.complete_Pattern(model, ruleCall, context, acceptor)
//
//		acceptor.accept(createCompletionProposal("()", context));
//	}
//	override complete_NodePattern(EObject model, RuleCall ruleCall, ContentAssistContext context,
//		ICompletionProposalAcceptor acceptor) {
//		super.complete_NodePattern(model, ruleCall, context, acceptor);
//
//		// Create and register the completion proposal:
//		// The proposal may be null as the createCompletionProposal(..) 
//		// methods check for valid prefixes and terminal token conflicts.
//		// The acceptor handles null-values gracefully.
//		var proposal = (createCompletionProposal("(var)", "Node", null,
//			context) as ConfigurableCompletionProposal)
//
//		proposal.setSelectionStart(proposal.replacementOffset + 1);
//		proposal.setSelectionLength(3);
//		proposal.setSimpleLinkedMode(context.viewer, '\t')
//		proposal.setCursorPosition(4);
//		acceptor.accept(proposal)
//	}
}
